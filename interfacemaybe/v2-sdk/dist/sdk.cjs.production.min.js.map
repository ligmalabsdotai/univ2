{"version":3,"file":"sdk.cjs.production.min.js","sources":["../src/constants.ts","../src/errors.ts","../src/utils.ts","../src/entities/currency.ts","../src/entities/token.ts","../src/entities/fractions/fraction.ts","../src/entities/fractions/currencyAmount.ts","../src/entities/fractions/tokenAmount.ts","../src/entities/fractions/price.ts","../src/entities/pair.ts","../src/entities/route.ts","../src/entities/fractions/percent.ts","../src/entities/trade.ts","../src/router.ts","../src/fetcher.ts"],"sourcesContent":["import JSBI from 'jsbi'\n\n// exports for external consumption\nexport type BigintIsh = JSBI | bigint | string\n\nexport enum ChainId {\n  MAINNET = 56709,\n  ROPSTEN = 3,\n  RINKEBY = 4,\n  GÖRLI = 5,\n  KOVAN = 42\n}\n\nexport enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT\n}\n\nexport enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP\n}\n\nexport const FACTORY_ADDRESS = '0x78ebE685961Fcbe72671c819c0F011d5B60B782a'\n\nexport const INIT_CODE_HASH = '0x467d41f67eee0008df1487cb8493d243faa23e4abe5d6149a41c7ad048d43249'\n\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)\n\n// exports for internal consumption\nexport const ZERO = JSBI.BigInt(0)\nexport const ONE = JSBI.BigInt(1)\nexport const TWO = JSBI.BigInt(2)\nexport const THREE = JSBI.BigInt(3)\nexport const FIVE = JSBI.BigInt(5)\nexport const TEN = JSBI.BigInt(10)\nexport const _100 = JSBI.BigInt(100)\nexport const _997 = JSBI.BigInt(997)\nexport const _1000 = JSBI.BigInt(1000)\n\nexport enum SolidityType {\n  uint8 = 'uint8',\n  uint256 = 'uint256'\n}\n\nexport const SOLIDITY_TYPE_MAXIMA = {\n  [SolidityType.uint8]: JSBI.BigInt('0xff'),\n  [SolidityType.uint256]: JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n}\n","// see https://stackoverflow.com/a/41102306\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\n\n/**\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\n * obtained by sending any amount of input.\n */\nexport class InsufficientReservesError extends Error {\n  public readonly isInsufficientReservesError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n\n/**\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\n * than the price of a single unit of output after fees.\n */\nexport class InsufficientInputAmountError extends Error {\n  public readonly isInsufficientInputAmountError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport warning from 'tiny-warning'\nimport JSBI from 'jsbi'\nimport { getAddress } from '@ethersproject/address'\n\nimport { BigintIsh, ZERO, ONE, TWO, THREE, SolidityType, SOLIDITY_TYPE_MAXIMA } from './constants'\n\nexport function validateSolidityTypeInstance(value: JSBI, solidityType: SolidityType): void {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), `${value} is not a ${solidityType}.`)\n  invariant(JSBI.lessThanOrEqual(value, SOLIDITY_TYPE_MAXIMA[solidityType]), `${value} is not a ${solidityType}.`)\n}\n\n// warns if addresses are not checksummed\nexport function validateAndParseAddress(address: string): string {\n  try {\n    const checksummedAddress = getAddress(address)\n    warning(address === checksummedAddress, `${address} is not checksummed.`)\n    return checksummedAddress\n  } catch (error) {\n    invariant(false, `${address} is not a valid address.`)\n  }\n}\n\nexport function parseBigintIsh(bigintIsh: BigintIsh): JSBI {\n  return bigintIsh instanceof JSBI\n    ? bigintIsh\n    : typeof bigintIsh === 'bigint'\n    ? JSBI.BigInt(bigintIsh.toString())\n    : JSBI.BigInt(bigintIsh)\n}\n\n// mock the on-chain sqrt function\nexport function sqrt(y: JSBI): JSBI {\n  validateSolidityTypeInstance(y, SolidityType.uint256)\n  let z: JSBI = ZERO\n  let x: JSBI\n  if (JSBI.greaterThan(y, THREE)) {\n    z = y\n    x = JSBI.add(JSBI.divide(y, TWO), ONE)\n    while (JSBI.lessThan(x, z)) {\n      z = x\n      x = JSBI.divide(JSBI.add(JSBI.divide(y, x), x), TWO)\n    }\n  } else if (JSBI.notEqual(y, ZERO)) {\n    z = ONE\n  }\n  return z\n}\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add)\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\n","import JSBI from 'jsbi'\n\nimport { SolidityType } from '../constants'\nimport { validateSolidityTypeInstance } from '../utils'\n\n/**\n * A currency is any fungible financial instrument on Ethereum, including Ether and all ERC20 tokens.\n *\n * The only instance of the base class `Currency` is Ether.\n */\nexport class Currency {\n  public readonly decimals: number\n  public readonly symbol?: string\n  public readonly name?: string\n\n  /**\n   * The only instance of the base class `Currency`.\n   */\n  public static readonly ETHER: Currency = new Currency(18, 'ETH', 'Ether')\n\n  /**\n   * Constructs an instance of the base class `Currency`. The only instance of the base class `Currency` is `Currency.ETHER`.\n   * @param decimals decimals of the currency\n   * @param symbol symbol of the currency\n   * @param name of the currency\n   */\n  protected constructor(decimals: number, symbol?: string, name?: string) {\n    validateSolidityTypeInstance(JSBI.BigInt(decimals), SolidityType.uint8)\n\n    this.decimals = decimals\n    this.symbol = symbol\n    this.name = name\n  }\n}\n\nconst ETHER = Currency.ETHER\nexport { ETHER }\n","import invariant from 'tiny-invariant'\nimport { ChainId } from '../constants'\nimport { validateAndParseAddress } from '../utils'\nimport { Currency } from './currency'\n\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\nexport class Token extends Currency {\n  public readonly chainId: ChainId\n  public readonly address: string\n\n  public constructor(chainId: ChainId, address: string, decimals: number, symbol?: string, name?: string) {\n    super(decimals, symbol, name)\n    this.chainId = chainId\n    this.address = validateAndParseAddress(address)\n  }\n\n  /**\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\n   * @param other other token to compare\n   */\n  public equals(other: Token): boolean {\n    // short circuit on reference equality\n    if (this === other) {\n      return true\n    }\n    return this.chainId === other.chainId && this.address === other.address\n  }\n\n  /**\n   * Returns true if the address of this token sorts before the address of the other token\n   * @param other other token to compare\n   * @throws if the tokens have the same address\n   * @throws if the tokens are on different chains\n   */\n  public sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address !== other.address, 'ADDRESSES')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n}\n\n/**\n * Compares two currencies for equality\n */\nexport function currencyEquals(currencyA: Currency, currencyB: Currency): boolean {\n  if (currencyA instanceof Token && currencyB instanceof Token) {\n    return currencyA.equals(currencyB)\n  } else if (currencyA instanceof Token) {\n    return false\n  } else if (currencyB instanceof Token) {\n    return false\n  } else {\n    return currencyA === currencyB\n  }\n}\n\nexport const WETH = {\n  [ChainId.MAINNET]: new Token(\n    ChainId.MAINNET,\n    '0xacA2c8c66db0EEaBC18Eb60C114F67def14ff5D5',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.ROPSTEN]: new Token(\n    ChainId.ROPSTEN,\n    '0xc778417E063141139Fce010982780140Aa0cD5Ab',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.RINKEBY]: new Token(\n    ChainId.RINKEBY,\n    '0xc778417E063141139Fce010982780140Aa0cD5Ab',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.GÖRLI]: new Token(ChainId.GÖRLI, '0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6', 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.KOVAN]: new Token(ChainId.KOVAN, '0xd0A1E359811322d97991E03f863a0C30C2cF029C', 18, 'WETH', 'Wrapped Ether')\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Decimal from 'decimal.js-light'\nimport _Big, { RoundingMode } from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding } from '../../constants'\nimport { ONE } from '../../constants'\nimport { parseBigintIsh } from '../../utils'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\n}\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp\n}\n\nexport class Fraction {\n  public readonly numerator: JSBI\n  public readonly denominator: JSBI\n\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = ONE) {\n    this.numerator = parseBigintIsh(numerator)\n    this.denominator = parseBigintIsh(denominator)\n  }\n\n  // performs floor division\n  public get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  // remainder after floor division\n  public get remainder(): Fraction {\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\n  }\n\n  public invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  public add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator)\n    )\n  }\n\n  public toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n\n  public toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\n  }\n}\n","import { currencyEquals } from '../token'\nimport { Currency, ETHER } from '../currency'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Big from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding, TEN, SolidityType } from '../../constants'\nimport { parseBigintIsh, validateSolidityTypeInstance } from '../../utils'\nimport { Fraction } from './fraction'\n\nconst Big = toFormat(_Big)\n\nexport class CurrencyAmount extends Fraction {\n  public readonly currency: Currency\n\n  /**\n   * Helper that calls the constructor with the ETHER currency\n   * @param amount ether amount in wei\n   */\n  public static ether(amount: BigintIsh): CurrencyAmount {\n    return new CurrencyAmount(ETHER, amount)\n  }\n\n  // amount _must_ be raw, i.e. in the native representation\n  protected constructor(currency: Currency, amount: BigintIsh) {\n    const parsedAmount = parseBigintIsh(amount)\n    validateSolidityTypeInstance(parsedAmount, SolidityType.uint256)\n\n    super(parsedAmount, JSBI.exponentiate(TEN, JSBI.BigInt(currency.decimals)))\n    this.currency = currency\n  }\n\n  public get raw(): JSBI {\n    return this.numerator\n  }\n\n  public add(other: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\n    return new CurrencyAmount(this.currency, JSBI.add(this.raw, other.raw))\n  }\n\n  public subtract(other: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\n    return new CurrencyAmount(this.currency, JSBI.subtract(this.raw, other.raw))\n  }\n\n  public toSignificant(\n    significantDigits: number = 6,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    return super.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(\n    decimalPlaces: number = this.currency.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\n    return super.toFixed(decimalPlaces, format, rounding)\n  }\n\n  public toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.currency.decimals\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(format)\n  }\n}\n","import { CurrencyAmount } from './currencyAmount'\nimport { Token } from '../token'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { BigintIsh } from '../../constants'\n\nexport class TokenAmount extends CurrencyAmount {\n  public readonly token: Token\n\n  // amount _must_ be raw, i.e. in the native representation\n  public constructor(token: Token, amount: BigintIsh) {\n    super(token, amount)\n    this.token = token\n  }\n\n  public add(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.add(this.raw, other.raw))\n  }\n\n  public subtract(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.subtract(this.raw, other.raw))\n  }\n}\n","import { Token } from '../token'\nimport { TokenAmount } from './tokenAmount'\nimport { currencyEquals } from '../token'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { BigintIsh, Rounding, TEN } from '../../constants'\nimport { Currency } from '../currency'\nimport { Route } from '../route'\nimport { Fraction } from './fraction'\nimport { CurrencyAmount } from './currencyAmount'\n\nexport class Price extends Fraction {\n  public readonly baseCurrency: Currency // input i.e. denominator\n  public readonly quoteCurrency: Currency // output i.e. numerator\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  public static fromRoute(route: Route): Price {\n    const prices: Price[] = []\n    for (const [i, pair] of route.pairs.entries()) {\n      prices.push(\n        route.path[i].equals(pair.token0)\n          ? new Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.raw, pair.reserve1.raw)\n          : new Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.raw, pair.reserve0.raw)\n      )\n    }\n    return prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\n  }\n\n  // denominator and numerator _must_ be raw, i.e. in the native representation\n  public constructor(baseCurrency: Currency, quoteCurrency: Currency, denominator: BigintIsh, numerator: BigintIsh) {\n    super(numerator, denominator)\n\n    this.baseCurrency = baseCurrency\n    this.quoteCurrency = quoteCurrency\n    this.scalar = new Fraction(\n      JSBI.exponentiate(TEN, JSBI.BigInt(baseCurrency.decimals)),\n      JSBI.exponentiate(TEN, JSBI.BigInt(quoteCurrency.decimals))\n    )\n  }\n\n  public get raw(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n\n  public get adjusted(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  public invert(): Price {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\n  }\n\n  public multiply(other: Price): Price {\n    invariant(currencyEquals(this.quoteCurrency, other.baseCurrency), 'TOKEN')\n    const fraction = super.multiply(other)\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\n  }\n\n  // performs floor division on overflow\n  public quote(currencyAmount: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(currencyAmount.currency, this.baseCurrency), 'TOKEN')\n    if (this.quoteCurrency instanceof Token) {\n      return new TokenAmount(this.quoteCurrency, super.multiply(currencyAmount.raw).quotient)\n    }\n    return CurrencyAmount.ether(super.multiply(currencyAmount.raw).quotient)\n  }\n\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import { Price } from './fractions/price'\nimport { TokenAmount } from './fractions/tokenAmount'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { pack, keccak256 } from '@ethersproject/solidity'\nimport { getCreate2Address } from '@ethersproject/address'\n\nimport {\n  BigintIsh,\n  FACTORY_ADDRESS,\n  INIT_CODE_HASH,\n  MINIMUM_LIQUIDITY,\n  ZERO,\n  ONE,\n  FIVE,\n  _997,\n  _1000,\n  ChainId\n} from '../constants'\nimport { sqrt, parseBigintIsh } from '../utils'\nimport { InsufficientReservesError, InsufficientInputAmountError } from '../errors'\nimport { Token } from './token'\n\nlet PAIR_ADDRESS_CACHE: { [token0Address: string]: { [token1Address: string]: string } } = {}\n\nexport class Pair {\n  public readonly liquidityToken: Token\n  private readonly tokenAmounts: [TokenAmount, TokenAmount]\n\n  public static getAddress(tokenA: Token, tokenB: Token): string {\n    const tokens = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\n\n    if (PAIR_ADDRESS_CACHE?.[tokens[0].address]?.[tokens[1].address] === undefined) {\n      PAIR_ADDRESS_CACHE = {\n        ...PAIR_ADDRESS_CACHE,\n        [tokens[0].address]: {\n          ...PAIR_ADDRESS_CACHE?.[tokens[0].address],\n          [tokens[1].address]: getCreate2Address(\n            FACTORY_ADDRESS,\n            keccak256(['bytes'], [pack(['address', 'address'], [tokens[0].address, tokens[1].address])]),\n            INIT_CODE_HASH\n          )\n        }\n      }\n    }\n\n    return PAIR_ADDRESS_CACHE[tokens[0].address][tokens[1].address]\n  }\n\n  public constructor(tokenAmountA: TokenAmount, tokenAmountB: TokenAmount) {\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    this.liquidityToken = new Token(\n      tokenAmounts[0].token.chainId,\n      Pair.getAddress(tokenAmounts[0].token, tokenAmounts[1].token),\n      18,\n      'UNI-V2',\n      'Uniswap V2'\n    )\n    this.tokenAmounts = tokenAmounts as [TokenAmount, TokenAmount]\n  }\n\n  /**\n   * Returns true if the token is either token0 or token1\n   * @param token to check\n   */\n  public involvesToken(token: Token): boolean {\n    return token.equals(this.token0) || token.equals(this.token1)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\n   */\n  public get token0Price(): Price {\n    return new Price(this.token0, this.token1, this.tokenAmounts[0].raw, this.tokenAmounts[1].raw)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\n   */\n  public get token1Price(): Price {\n    return new Price(this.token1, this.token0, this.tokenAmounts[1].raw, this.tokenAmounts[0].raw)\n  }\n\n  /**\n   * Return the price of the given token in terms of the other token in the pair.\n   * @param token token to return price of\n   */\n  public priceOf(token: Token): Price {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\n  }\n\n  /**\n   * Returns the chain ID of the tokens in the pair.\n   */\n  public get chainId(): ChainId {\n    return this.token0.chainId\n  }\n\n  public get token0(): Token {\n    return this.tokenAmounts[0].token\n  }\n\n  public get token1(): Token {\n    return this.tokenAmounts[1].token\n  }\n\n  public get reserve0(): TokenAmount {\n    return this.tokenAmounts[0]\n  }\n\n  public get reserve1(): TokenAmount {\n    return this.tokenAmounts[1]\n  }\n\n  public reserveOf(token: Token): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\n  }\n\n  public getOutputAmount(inputAmount: TokenAmount): [TokenAmount, Pair] {\n    invariant(this.involvesToken(inputAmount.token), 'TOKEN')\n    if (JSBI.equal(this.reserve0.raw, ZERO) || JSBI.equal(this.reserve1.raw, ZERO)) {\n      throw new InsufficientReservesError()\n    }\n    const inputReserve = this.reserveOf(inputAmount.token)\n    const outputReserve = this.reserveOf(inputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const inputAmountWithFee = JSBI.multiply(inputAmount.raw, _997)\n    const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.raw)\n    const denominator = JSBI.add(JSBI.multiply(inputReserve.raw, _1000), inputAmountWithFee)\n    const outputAmount = new TokenAmount(\n      inputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.divide(numerator, denominator)\n    )\n    if (JSBI.equal(outputAmount.raw, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return [outputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getInputAmount(outputAmount: TokenAmount): [TokenAmount, Pair] {\n    invariant(this.involvesToken(outputAmount.token), 'TOKEN')\n    if (\n      JSBI.equal(this.reserve0.raw, ZERO) ||\n      JSBI.equal(this.reserve1.raw, ZERO) ||\n      JSBI.greaterThanOrEqual(outputAmount.raw, this.reserveOf(outputAmount.token).raw)\n    ) {\n      throw new InsufficientReservesError()\n    }\n\n    const outputReserve = this.reserveOf(outputAmount.token)\n    const inputReserve = this.reserveOf(outputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const numerator = JSBI.multiply(JSBI.multiply(inputReserve.raw, outputAmount.raw), _1000)\n    const denominator = JSBI.multiply(JSBI.subtract(outputReserve.raw, outputAmount.raw), _997)\n    const inputAmount = new TokenAmount(\n      outputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.add(JSBI.divide(numerator, denominator), ONE)\n    )\n    return [inputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getLiquidityMinted(\n    totalSupply: TokenAmount,\n    tokenAmountA: TokenAmount,\n    tokenAmountB: TokenAmount\n  ): TokenAmount {\n    invariant(totalSupply.token.equals(this.liquidityToken), 'LIQUIDITY')\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    invariant(tokenAmounts[0].token.equals(this.token0) && tokenAmounts[1].token.equals(this.token1), 'TOKEN')\n\n    let liquidity: JSBI\n    if (JSBI.equal(totalSupply.raw, ZERO)) {\n      liquidity = JSBI.subtract(sqrt(JSBI.multiply(tokenAmounts[0].raw, tokenAmounts[1].raw)), MINIMUM_LIQUIDITY)\n    } else {\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].raw, totalSupply.raw), this.reserve0.raw)\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].raw, totalSupply.raw), this.reserve1.raw)\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\n    }\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return new TokenAmount(this.liquidityToken, liquidity)\n  }\n\n  public getLiquidityValue(\n    token: Token,\n    totalSupply: TokenAmount,\n    liquidity: TokenAmount,\n    feeOn: boolean = false,\n    kLast?: BigintIsh\n  ): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    invariant(totalSupply.token.equals(this.liquidityToken), 'TOTAL_SUPPLY')\n    invariant(liquidity.token.equals(this.liquidityToken), 'LIQUIDITY')\n    invariant(JSBI.lessThanOrEqual(liquidity.raw, totalSupply.raw), 'LIQUIDITY')\n\n    let totalSupplyAdjusted: TokenAmount\n    if (!feeOn) {\n      totalSupplyAdjusted = totalSupply\n    } else {\n      invariant(!!kLast, 'K_LAST')\n      const kLastParsed = parseBigintIsh(kLast)\n      if (!JSBI.equal(kLastParsed, ZERO)) {\n        const rootK = sqrt(JSBI.multiply(this.reserve0.raw, this.reserve1.raw))\n        const rootKLast = sqrt(kLastParsed)\n        if (JSBI.greaterThan(rootK, rootKLast)) {\n          const numerator = JSBI.multiply(totalSupply.raw, JSBI.subtract(rootK, rootKLast))\n          const denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast)\n          const feeLiquidity = JSBI.divide(numerator, denominator)\n          totalSupplyAdjusted = totalSupply.add(new TokenAmount(this.liquidityToken, feeLiquidity))\n        } else {\n          totalSupplyAdjusted = totalSupply\n        }\n      } else {\n        totalSupplyAdjusted = totalSupply\n      }\n    }\n\n    return new TokenAmount(\n      token,\n      JSBI.divide(JSBI.multiply(liquidity.raw, this.reserveOf(token).raw), totalSupplyAdjusted.raw)\n    )\n  }\n}\n","import { ChainId } from '../constants'\nimport invariant from 'tiny-invariant'\n\nimport { Currency, ETHER } from './currency'\nimport { Token, WETH } from './token'\nimport { Pair } from './pair'\nimport { Price } from './fractions/price'\n\nexport class Route {\n  public readonly pairs: Pair[]\n  public readonly path: Token[]\n  public readonly input: Currency\n  public readonly output: Currency\n  public readonly midPrice: Price\n\n  public constructor(pairs: Pair[], input: Currency, output?: Currency) {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(\n      pairs.every(pair => pair.chainId === pairs[0].chainId),\n      'CHAIN_IDS'\n    )\n    invariant(\n      (input instanceof Token && pairs[0].involvesToken(input)) ||\n        (input === ETHER && pairs[0].involvesToken(WETH[pairs[0].chainId])),\n      'INPUT'\n    )\n    invariant(\n      typeof output === 'undefined' ||\n        (output instanceof Token && pairs[pairs.length - 1].involvesToken(output)) ||\n        (output === ETHER && pairs[pairs.length - 1].involvesToken(WETH[pairs[0].chainId])),\n      'OUTPUT'\n    )\n\n    const path: Token[] = [input instanceof Token ? input : WETH[pairs[0].chainId]]\n    for (const [i, pair] of pairs.entries()) {\n      const currentInput = path[i]\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH')\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0\n      path.push(output)\n    }\n\n    this.pairs = pairs\n    this.path = path\n    this.midPrice = Price.fromRoute(this)\n    this.input = input\n    this.output = output ?? path[path.length - 1]\n  }\n\n  public get chainId(): ChainId {\n    return this.pairs[0].chainId\n  }\n}\n","import { Rounding, _100 } from '../../constants'\nimport { Fraction } from './fraction'\n\nconst _100_PERCENT = new Fraction(_100)\n\nexport class Percent extends Fraction {\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import invariant from 'tiny-invariant'\n\nimport { ChainId, ONE, TradeType, ZERO } from '../constants'\nimport { sortedInsert } from '../utils'\nimport { Currency, ETHER } from './currency'\nimport { CurrencyAmount } from './fractions/currencyAmount'\nimport { Fraction } from './fractions/fraction'\nimport { Percent } from './fractions/percent'\nimport { Price } from './fractions/price'\nimport { TokenAmount } from './fractions/tokenAmount'\nimport { Pair } from './pair'\nimport { Route } from './route'\nimport { currencyEquals, Token, WETH } from './token'\n\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nfunction computePriceImpact(midPrice: Price, inputAmount: CurrencyAmount, outputAmount: CurrencyAmount): Percent {\n  const exactQuote = midPrice.raw.multiply(inputAmount.raw)\n  // calculate slippage := (exactQuote - outputAmount) / exactQuote\n  const slippage = exactQuote.subtract(outputAmount.raw).divide(exactQuote)\n  return new Percent(slippage.numerator, slippage.denominator)\n}\n\n// minimal interface so the input output comparator may be shared across types\ninterface InputOutput {\n  readonly inputAmount: CurrencyAmount\n  readonly outputAmount: CurrencyAmount\n}\n\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\nexport function inputOutputComparator(a: InputOutput, b: InputOutput): number {\n  // must have same input and output token for comparison\n  invariant(currencyEquals(a.inputAmount.currency, b.inputAmount.currency), 'INPUT_CURRENCY')\n  invariant(currencyEquals(a.outputAmount.currency, b.outputAmount.currency), 'OUTPUT_CURRENCY')\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\nexport function tradeComparator(a: Trade, b: Trade) {\n  const ioComp = inputOutputComparator(a, b)\n  if (ioComp !== 0) {\n    return ioComp\n  }\n\n  // consider lowest slippage next, since these are less likely to fail\n  if (a.priceImpact.lessThan(b.priceImpact)) {\n    return -1\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\n    return 1\n  }\n\n  // finally consider the number of hops since each hop costs gas\n  return a.route.path.length - b.route.path.length\n}\n\nexport interface BestTradeOptions {\n  // how many results to return\n  maxNumResults?: number\n  // the maximum number of hops a trade should contain\n  maxHops?: number\n}\n\n/**\n * Given a currency amount and a chain ID, returns the equivalent representation as the token amount.\n * In other words, if the currency is ETHER, returns the WETH token amount for the given chain. Otherwise, returns\n * the input currency amount.\n */\nfunction wrappedAmount(currencyAmount: CurrencyAmount, chainId: ChainId): TokenAmount {\n  if (currencyAmount instanceof TokenAmount) return currencyAmount\n  if (currencyAmount.currency === ETHER) return new TokenAmount(WETH[chainId], currencyAmount.raw)\n  invariant(false, 'CURRENCY')\n}\n\nfunction wrappedCurrency(currency: Currency, chainId: ChainId): Token {\n  if (currency instanceof Token) return currency\n  if (currency === ETHER) return WETH[chainId]\n  invariant(false, 'CURRENCY')\n}\n\n/**\n * Represents a trade executed against a list of pairs.\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\n */\nexport class Trade {\n  /**\n   * The route of the trade, i.e. which pairs the trade goes through.\n   */\n  public readonly route: Route\n  /**\n   * The type of the trade, either exact in or exact out.\n   */\n  public readonly tradeType: TradeType\n  /**\n   * The input amount for the trade assuming no slippage.\n   */\n  public readonly inputAmount: CurrencyAmount\n  /**\n   * The output amount for the trade assuming no slippage.\n   */\n  public readonly outputAmount: CurrencyAmount\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  public readonly executionPrice: Price\n  /**\n   * The mid price after the trade executes assuming no slippage.\n   */\n  public readonly nextMidPrice: Price\n  /**\n   * The percent difference between the mid price before the trade and the trade execution price.\n   */\n  public readonly priceImpact: Percent\n\n  /**\n   * Constructs an exact in trade with the given amount in and route\n   * @param route route of the exact in trade\n   * @param amountIn the amount being passed in\n   */\n  public static exactIn(route: Route, amountIn: CurrencyAmount): Trade {\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT)\n  }\n\n  /**\n   * Constructs an exact out trade with the given amount out and route\n   * @param route route of the exact out trade\n   * @param amountOut the amount returned by the trade\n   */\n  public static exactOut(route: Route, amountOut: CurrencyAmount): Trade {\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT)\n  }\n\n  public constructor(route: Route, amount: CurrencyAmount, tradeType: TradeType) {\n    const amounts: TokenAmount[] = new Array(route.path.length)\n    const nextPairs: Pair[] = new Array(route.pairs.length)\n    if (tradeType === TradeType.EXACT_INPUT) {\n      invariant(currencyEquals(amount.currency, route.input), 'INPUT')\n      amounts[0] = wrappedAmount(amount, route.chainId)\n      for (let i = 0; i < route.path.length - 1; i++) {\n        const pair = route.pairs[i]\n        const [outputAmount, nextPair] = pair.getOutputAmount(amounts[i])\n        amounts[i + 1] = outputAmount\n        nextPairs[i] = nextPair\n      }\n    } else {\n      invariant(currencyEquals(amount.currency, route.output), 'OUTPUT')\n      amounts[amounts.length - 1] = wrappedAmount(amount, route.chainId)\n      for (let i = route.path.length - 1; i > 0; i--) {\n        const pair = route.pairs[i - 1]\n        const [inputAmount, nextPair] = pair.getInputAmount(amounts[i])\n        amounts[i - 1] = inputAmount\n        nextPairs[i - 1] = nextPair\n      }\n    }\n\n    this.route = route\n    this.tradeType = tradeType\n    this.inputAmount =\n      tradeType === TradeType.EXACT_INPUT\n        ? amount\n        : route.input === ETHER\n        ? CurrencyAmount.ether(amounts[0].raw)\n        : amounts[0]\n    this.outputAmount =\n      tradeType === TradeType.EXACT_OUTPUT\n        ? amount\n        : route.output === ETHER\n        ? CurrencyAmount.ether(amounts[amounts.length - 1].raw)\n        : amounts[amounts.length - 1]\n    this.executionPrice = new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.inputAmount.raw,\n      this.outputAmount.raw\n    )\n    this.nextMidPrice = Price.fromRoute(new Route(nextPairs, route.input))\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\n  }\n\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return this.outputAmount\n    } else {\n      const slippageAdjustedAmountOut = new Fraction(ONE)\n        .add(slippageTolerance)\n        .invert()\n        .multiply(this.outputAmount.raw).quotient\n      return this.outputAmount instanceof TokenAmount\n        ? new TokenAmount(this.outputAmount.token, slippageAdjustedAmountOut)\n        : CurrencyAmount.ether(slippageAdjustedAmountOut)\n    }\n  }\n\n  /**\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return this.inputAmount\n    } else {\n      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.raw).quotient\n      return this.inputAmount instanceof TokenAmount\n        ? new TokenAmount(this.inputAmount.token, slippageAdjustedAmountIn)\n        : CurrencyAmount.ether(slippageAdjustedAmountIn)\n    }\n  }\n\n  /**\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n   * amount to an output token, making at most `maxHops` hops.\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyAmountIn exact amount of input currency to spend\n   * @param currencyOut the desired currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountIn used in recursion; the original value of the currencyAmountIn parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactIn(\n    pairs: Pair[],\n    currencyAmountIn: CurrencyAmount,\n    currencyOut: Currency,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountIn: CurrencyAmount = currencyAmountIn,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountIn === currencyAmountIn || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountIn instanceof TokenAmount\n        ? currencyAmountIn.token.chainId\n        : currencyOut instanceof Token\n        ? currencyOut.chainId\n        : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountIn = wrappedAmount(currencyAmountIn, chainId)\n    const tokenOut = wrappedCurrency(currencyOut, chainId)\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountIn.token) && !pair.token1.equals(amountIn.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountOut: TokenAmount\n      try {\n        ;[amountOut] = pair.getOutputAmount(amountIn)\n      } catch (error) {\n        // input too low\n        if (error.isInsufficientInputAmountError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (amountOut.token.equals(tokenOut)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([...currentPairs, pair], originalAmountIn.currency, currencyOut),\n            originalAmountIn,\n            TradeType.EXACT_INPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactIn(\n          pairsExcludingThisPair,\n          amountOut,\n          currencyOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [...currentPairs, pair],\n          originalAmountIn,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n\n  /**\n   * similar to the above method but instead targets a fixed output amount\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\n   * to an output token amount, making at most `maxHops` hops\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyIn the currency to spend\n   * @param currencyAmountOut the exact amount of currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountOut used in recursion; the original value of the currencyAmountOut parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactOut(\n    pairs: Pair[],\n    currencyIn: Currency,\n    currencyAmountOut: CurrencyAmount,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountOut: CurrencyAmount = currencyAmountOut,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountOut === currencyAmountOut || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountOut instanceof TokenAmount\n        ? currencyAmountOut.token.chainId\n        : currencyIn instanceof Token\n        ? currencyIn.chainId\n        : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountOut = wrappedAmount(currencyAmountOut, chainId)\n    const tokenIn = wrappedCurrency(currencyIn, chainId)\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountOut.token) && !pair.token1.equals(amountOut.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountIn: TokenAmount\n      try {\n        ;[amountIn] = pair.getInputAmount(amountOut)\n      } catch (error) {\n        // not enough liquidity in this pair\n        if (error.isInsufficientReservesError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the input token, so this is the first trade of one of the paths\n      if (amountIn.token.equals(tokenIn)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([pair, ...currentPairs], currencyIn, originalAmountOut.currency),\n            originalAmountOut,\n            TradeType.EXACT_OUTPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactOut(\n          pairsExcludingThisPair,\n          currencyIn,\n          amountIn,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [pair, ...currentPairs],\n          originalAmountOut,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n}\n","import { TradeType } from './constants'\nimport invariant from 'tiny-invariant'\nimport { validateAndParseAddress } from './utils'\nimport { CurrencyAmount, ETHER, Percent, Trade } from './entities'\n\n/**\n * Options for producing the arguments to send call to the router.\n */\nexport interface TradeOptions {\n  /**\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\n   */\n  allowedSlippage: Percent\n  /**\n   * How long the swap is valid until it expires, in seconds.\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\n   * are generated.\n   */\n  ttl: number\n  /**\n   * The account that should receive the output of the swap.\n   */\n  recipient: string\n\n  /**\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\n   */\n  feeOnTransfer?: boolean\n}\n\n/**\n * The parameters to use in the call to the Uniswap V2 Router to execute a trade.\n */\nexport interface SwapParameters {\n  /**\n   * The method to call on the Uniswap V2 Router.\n   */\n  methodName: string\n  /**\n   * The arguments to pass to the method, all hex encoded.\n   */\n  args: (string | string[])[]\n  /**\n   * The amount of wei to send in hex.\n   */\n  value: string\n}\n\nfunction toHex(currencyAmount: CurrencyAmount) {\n  return `0x${currencyAmount.raw.toString(16)}`\n}\n\nconst ZERO_HEX = '0x0'\n\n/**\n * Represents the Uniswap V2 Router, and has static methods for helping execute trades.\n */\nexport abstract class Router {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trade to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapCallParameters(trade: Trade, options: TradeOptions): SwapParameters {\n    const etherIn = trade.inputAmount.currency === ETHER\n    const etherOut = trade.outputAmount.currency === ETHER\n    // the router does not support both ether in and out\n    invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')\n    invariant(options.ttl > 0, 'TTL')\n\n    const to: string = validateAndParseAddress(options.recipient)\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage))\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage))\n    const path: string[] = trade.route.path.map(token => token.address)\n    const deadline = `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\n    const useFeeOnTransfer = Boolean(options.feeOnTransfer)\n\n    let methodName: string\n    let args: (string | string[])[]\n    let value: string\n    switch (trade.tradeType) {\n      case TradeType.EXACT_INPUT:\n        if (etherIn) {\n          methodName = useFeeOnTransfer ? 'swapExactETHForTokensSupportingFeeOnTransferTokens' : 'swapExactETHForTokens'\n          // (uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = useFeeOnTransfer ? 'swapExactTokensForETHSupportingFeeOnTransferTokens' : 'swapExactTokensForETH'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = useFeeOnTransfer\n            ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens'\n            : 'swapExactTokensForTokens'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n      case TradeType.EXACT_OUTPUT:\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\n        if (etherIn) {\n          methodName = 'swapETHForExactTokens'\n          // (uint amountOut, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = 'swapTokensForExactETH'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = 'swapTokensForExactTokens'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n    }\n    return {\n      methodName,\n      args,\n      value\n    }\n  }\n}\n","import { Contract } from '@ethersproject/contracts'\nimport { getNetwork } from '@ethersproject/networks'\nimport { getDefaultProvider } from '@ethersproject/providers'\nimport { TokenAmount } from './entities/fractions/tokenAmount'\nimport { Pair } from './entities/pair'\nimport IUniswapV2Pair from '@uniswap/v2-core/build/IUniswapV2Pair.json'\nimport invariant from 'tiny-invariant'\nimport ERC20 from './abis/ERC20.json'\nimport { ChainId } from './constants'\nimport { Token } from './entities/token'\n\nlet TOKEN_DECIMALS_CACHE: { [chainId: number]: { [address: string]: number } } = {\n  [ChainId.MAINNET]: {\n    '0xE0B7927c4aF23765Cb51314A0E0521A9645F0E2A': 9 // DGD\n  }\n}\n\n/**\n * Contains methods for constructing instances of pairs and tokens from on-chain data.\n */\nexport abstract class Fetcher {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  /**\n   * Fetch information for a given token on the given chain, using the given ethers provider.\n   * @param chainId chain of the token\n   * @param address address of the token on the chain\n   * @param provider provider used to fetch the token\n   * @param symbol optional symbol of the token\n   * @param name optional name of the token\n   */\n  public static async fetchTokenData(\n    chainId: ChainId,\n    address: string,\n    provider = getDefaultProvider(getNetwork(chainId)),\n    symbol?: string,\n    name?: string\n  ): Promise<Token> {\n    const parsedDecimals =\n      typeof TOKEN_DECIMALS_CACHE?.[chainId]?.[address] === 'number'\n        ? TOKEN_DECIMALS_CACHE[chainId][address]\n        : await new Contract(address, ERC20, provider).decimals().then((decimals: number): number => {\n            TOKEN_DECIMALS_CACHE = {\n              ...TOKEN_DECIMALS_CACHE,\n              [chainId]: {\n                ...TOKEN_DECIMALS_CACHE?.[chainId],\n                [address]: decimals\n              }\n            }\n            return decimals\n          })\n    return new Token(chainId, address, parsedDecimals, symbol, name)\n  }\n\n  /**\n   * Fetches information about a pair and constructs a pair from the given two tokens.\n   * @param tokenA first token\n   * @param tokenB second token\n   * @param provider the provider to use to fetch the data\n   */\n  public static async fetchPairData(\n    tokenA: Token,\n    tokenB: Token,\n    provider = getDefaultProvider(getNetwork(tokenA.chainId))\n  ): Promise<Pair> {\n    invariant(tokenA.chainId === tokenB.chainId, 'CHAIN_ID')\n    const address = Pair.getAddress(tokenA, tokenB)\n    const [reserves0, reserves1] = await new Contract(address, IUniswapV2Pair.abi, provider).getReserves()\n    const balances = tokenA.sortsBefore(tokenB) ? [reserves0, reserves1] : [reserves1, reserves0]\n    return new Pair(new TokenAmount(tokenA, balances[0]), new TokenAmount(tokenB, balances[1]))\n  }\n}\n"],"names":["ChainId","TradeType","Rounding","INIT_CODE_HASH","MINIMUM_LIQUIDITY","JSBI","BigInt","ZERO","ONE","TWO","THREE","FIVE","TEN","_100","_997","_1000","SolidityType","SOLIDITY_TYPE_MAXIMA","[object Object]","uint8","uint256","CAN_SET_PROTOTYPE","Object","InsufficientReservesError","Error","constructor","super","this","name","setPrototypeOf","prototype","InsufficientInputAmountError","validateSolidityTypeInstance","value","solidityType","greaterThanOrEqual","invariant","lessThanOrEqual","validateAndParseAddress","address","getAddress","error","parseBigintIsh","bigintIsh","toString","sqrt","y","x","z","greaterThan","add","divide","lessThan","notEqual","sortedInsert","items","maxSize","comparator","length","push","isFull","lo","hi","mid","splice","pop","Currency","decimals","symbol","ETHER","Token","chainId","equals","other","sortsBefore","toLowerCase","currencyEquals","currencyA","currencyB","WETH","MAINNET","ROPSTEN","RINKEBY","GÖRLI","KOVAN","Decimal","toFormat","_Decimal","Big","_Big","toSignificantRounding","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","Fraction","numerator","denominator","quotient","remainder","invert","otherParsed","equal","multiply","subtract","equalTo","toSignificant","significantDigits","format","rounding","groupSeparator","Number","isInteger","set","precision","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","CurrencyAmount","currency","amount","parsedAmount","exponentiate","raw","toExact","TokenAmount","token","Price","baseCurrency","quoteCurrency","scalar","route","prices","i","pair","pairs","entries","path","token0","reserve0","reserve1","slice","reduce","accumulator","currentValue","adjusted","fraction","quote","currencyAmount","ether","PAIR_ADDRESS_CACHE","Pair","tokenAmountA","tokenAmountB","tokenAmounts","liquidityToken","tokenA","tokenB","tokens","_PAIR_ADDRESS_CACHE2","undefined","_PAIR_ADDRESS_CACHE","_PAIR_ADDRESS_CACHE$t","getCreate2Address","keccak256","pack","involvesToken","token1","token0Price","token1Price","priceOf","reserveOf","getOutputAmount","inputAmount","inputReserve","outputReserve","inputAmountWithFee","outputAmount","getInputAmount","getLiquidityMinted","totalSupply","liquidity","amount0","amount1","getLiquidityValue","feeOn","kLast","totalSupplyAdjusted","kLastParsed","rootK","rootKLast","feeLiquidity","Route","input","output","every","currentInput","midPrice","fromRoute","_100_PERCENT","Percent","inputOutputComparator","a","b","tradeComparator","ioComp","priceImpact","wrappedAmount","wrappedCurrency","Trade","tradeType","amounts","Array","nextPairs","EXACT_INPUT","nextPair","EXACT_OUTPUT","executionPrice","nextMidPrice","exactQuote","slippage","computePriceImpact","amountIn","amountOut","minimumAmountOut","slippageTolerance","slippageAdjustedAmountOut","maximumAmountIn","slippageAdjustedAmountIn","currencyAmountIn","currencyOut","_temp","currentPairs","originalAmountIn","bestTrades","maxNumResults","maxHops","tokenOut","isInsufficientInputAmountError","pairsExcludingThisPair","concat","bestTradeExactIn","currencyIn","currencyAmountOut","_temp2","originalAmountOut","tokenIn","isInsufficientReservesError","bestTradeExactOut","toHex","TOKEN_DECIMALS_CACHE","0xE0B7927c4aF23765Cb51314A0E0521A9645F0E2A","provider","parsedDecimals","getDefaultProvider","getNetwork","_TOKEN_DECIMALS_CACHE","_TOKEN_DECIMALS_CACHE2","Promise","resolve","Contract","ERC20","then","_TOKEN_DECIMALS_CACHE3","e","reject","IUniswapV2Pair","abi","getReserves","_ref","reserves0","reserves1","balances","trade","options","etherIn","etherOut","ttl","to","recipient","allowedSlippage","map","deadline","Math","floor","Date","getTime","useFeeOnTransfer","Boolean","feeOnTransfer","methodName","args"],"mappings":"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"}