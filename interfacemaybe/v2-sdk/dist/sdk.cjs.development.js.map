{"version":3,"file":"sdk.cjs.development.js","sources":["../src/constants.ts","../src/errors.ts","../src/utils.ts","../src/entities/currency.ts","../src/entities/token.ts","../src/entities/fractions/fraction.ts","../src/entities/fractions/currencyAmount.ts","../src/entities/fractions/tokenAmount.ts","../src/entities/fractions/price.ts","../src/entities/pair.ts","../src/entities/route.ts","../src/entities/fractions/percent.ts","../src/entities/trade.ts","../src/router.ts","../src/fetcher.ts"],"sourcesContent":["import JSBI from 'jsbi'\n\n// exports for external consumption\nexport type BigintIsh = JSBI | bigint | string\n\nexport enum ChainId {\n  MAINNET = 56709,\n  ROPSTEN = 3,\n  RINKEBY = 4,\n  GÖRLI = 5,\n  KOVAN = 42\n}\n\nexport enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT\n}\n\nexport enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP\n}\n\nexport const FACTORY_ADDRESS = '0x78ebE685961Fcbe72671c819c0F011d5B60B782a'\n\nexport const INIT_CODE_HASH = '0x467d41f67eee0008df1487cb8493d243faa23e4abe5d6149a41c7ad048d43249'\n\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)\n\n// exports for internal consumption\nexport const ZERO = JSBI.BigInt(0)\nexport const ONE = JSBI.BigInt(1)\nexport const TWO = JSBI.BigInt(2)\nexport const THREE = JSBI.BigInt(3)\nexport const FIVE = JSBI.BigInt(5)\nexport const TEN = JSBI.BigInt(10)\nexport const _100 = JSBI.BigInt(100)\nexport const _997 = JSBI.BigInt(997)\nexport const _1000 = JSBI.BigInt(1000)\n\nexport enum SolidityType {\n  uint8 = 'uint8',\n  uint256 = 'uint256'\n}\n\nexport const SOLIDITY_TYPE_MAXIMA = {\n  [SolidityType.uint8]: JSBI.BigInt('0xff'),\n  [SolidityType.uint256]: JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n}\n","// see https://stackoverflow.com/a/41102306\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\n\n/**\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\n * obtained by sending any amount of input.\n */\nexport class InsufficientReservesError extends Error {\n  public readonly isInsufficientReservesError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n\n/**\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\n * than the price of a single unit of output after fees.\n */\nexport class InsufficientInputAmountError extends Error {\n  public readonly isInsufficientInputAmountError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport warning from 'tiny-warning'\nimport JSBI from 'jsbi'\nimport { getAddress } from '@ethersproject/address'\n\nimport { BigintIsh, ZERO, ONE, TWO, THREE, SolidityType, SOLIDITY_TYPE_MAXIMA } from './constants'\n\nexport function validateSolidityTypeInstance(value: JSBI, solidityType: SolidityType): void {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), `${value} is not a ${solidityType}.`)\n  invariant(JSBI.lessThanOrEqual(value, SOLIDITY_TYPE_MAXIMA[solidityType]), `${value} is not a ${solidityType}.`)\n}\n\n// warns if addresses are not checksummed\nexport function validateAndParseAddress(address: string): string {\n  try {\n    const checksummedAddress = getAddress(address)\n    warning(address === checksummedAddress, `${address} is not checksummed.`)\n    return checksummedAddress\n  } catch (error) {\n    invariant(false, `${address} is not a valid address.`)\n  }\n}\n\nexport function parseBigintIsh(bigintIsh: BigintIsh): JSBI {\n  return bigintIsh instanceof JSBI\n    ? bigintIsh\n    : typeof bigintIsh === 'bigint'\n    ? JSBI.BigInt(bigintIsh.toString())\n    : JSBI.BigInt(bigintIsh)\n}\n\n// mock the on-chain sqrt function\nexport function sqrt(y: JSBI): JSBI {\n  validateSolidityTypeInstance(y, SolidityType.uint256)\n  let z: JSBI = ZERO\n  let x: JSBI\n  if (JSBI.greaterThan(y, THREE)) {\n    z = y\n    x = JSBI.add(JSBI.divide(y, TWO), ONE)\n    while (JSBI.lessThan(x, z)) {\n      z = x\n      x = JSBI.divide(JSBI.add(JSBI.divide(y, x), x), TWO)\n    }\n  } else if (JSBI.notEqual(y, ZERO)) {\n    z = ONE\n  }\n  return z\n}\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add)\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\n","import JSBI from 'jsbi'\n\nimport { SolidityType } from '../constants'\nimport { validateSolidityTypeInstance } from '../utils'\n\n/**\n * A currency is any fungible financial instrument on Ethereum, including Ether and all ERC20 tokens.\n *\n * The only instance of the base class `Currency` is Ether.\n */\nexport class Currency {\n  public readonly decimals: number\n  public readonly symbol?: string\n  public readonly name?: string\n\n  /**\n   * The only instance of the base class `Currency`.\n   */\n  public static readonly ETHER: Currency = new Currency(18, 'ETH', 'Ether')\n\n  /**\n   * Constructs an instance of the base class `Currency`. The only instance of the base class `Currency` is `Currency.ETHER`.\n   * @param decimals decimals of the currency\n   * @param symbol symbol of the currency\n   * @param name of the currency\n   */\n  protected constructor(decimals: number, symbol?: string, name?: string) {\n    validateSolidityTypeInstance(JSBI.BigInt(decimals), SolidityType.uint8)\n\n    this.decimals = decimals\n    this.symbol = symbol\n    this.name = name\n  }\n}\n\nconst ETHER = Currency.ETHER\nexport { ETHER }\n","import invariant from 'tiny-invariant'\nimport { ChainId } from '../constants'\nimport { validateAndParseAddress } from '../utils'\nimport { Currency } from './currency'\n\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\nexport class Token extends Currency {\n  public readonly chainId: ChainId\n  public readonly address: string\n\n  public constructor(chainId: ChainId, address: string, decimals: number, symbol?: string, name?: string) {\n    super(decimals, symbol, name)\n    this.chainId = chainId\n    this.address = validateAndParseAddress(address)\n  }\n\n  /**\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\n   * @param other other token to compare\n   */\n  public equals(other: Token): boolean {\n    // short circuit on reference equality\n    if (this === other) {\n      return true\n    }\n    return this.chainId === other.chainId && this.address === other.address\n  }\n\n  /**\n   * Returns true if the address of this token sorts before the address of the other token\n   * @param other other token to compare\n   * @throws if the tokens have the same address\n   * @throws if the tokens are on different chains\n   */\n  public sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address !== other.address, 'ADDRESSES')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n}\n\n/**\n * Compares two currencies for equality\n */\nexport function currencyEquals(currencyA: Currency, currencyB: Currency): boolean {\n  if (currencyA instanceof Token && currencyB instanceof Token) {\n    return currencyA.equals(currencyB)\n  } else if (currencyA instanceof Token) {\n    return false\n  } else if (currencyB instanceof Token) {\n    return false\n  } else {\n    return currencyA === currencyB\n  }\n}\n\nexport const WETH = {\n  [ChainId.MAINNET]: new Token(\n    ChainId.MAINNET,\n    '0xacA2c8c66db0EEaBC18Eb60C114F67def14ff5D5',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.ROPSTEN]: new Token(\n    ChainId.ROPSTEN,\n    '0xc778417E063141139Fce010982780140Aa0cD5Ab',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.RINKEBY]: new Token(\n    ChainId.RINKEBY,\n    '0xc778417E063141139Fce010982780140Aa0cD5Ab',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.GÖRLI]: new Token(ChainId.GÖRLI, '0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6', 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.KOVAN]: new Token(ChainId.KOVAN, '0xd0A1E359811322d97991E03f863a0C30C2cF029C', 18, 'WETH', 'Wrapped Ether')\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Decimal from 'decimal.js-light'\nimport _Big, { RoundingMode } from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding } from '../../constants'\nimport { ONE } from '../../constants'\nimport { parseBigintIsh } from '../../utils'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\n}\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp\n}\n\nexport class Fraction {\n  public readonly numerator: JSBI\n  public readonly denominator: JSBI\n\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = ONE) {\n    this.numerator = parseBigintIsh(numerator)\n    this.denominator = parseBigintIsh(denominator)\n  }\n\n  // performs floor division\n  public get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  // remainder after floor division\n  public get remainder(): Fraction {\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\n  }\n\n  public invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  public add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator)\n    )\n  }\n\n  public toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n\n  public toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\n  }\n}\n","import { currencyEquals } from '../token'\nimport { Currency, ETHER } from '../currency'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Big from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding, TEN, SolidityType } from '../../constants'\nimport { parseBigintIsh, validateSolidityTypeInstance } from '../../utils'\nimport { Fraction } from './fraction'\n\nconst Big = toFormat(_Big)\n\nexport class CurrencyAmount extends Fraction {\n  public readonly currency: Currency\n\n  /**\n   * Helper that calls the constructor with the ETHER currency\n   * @param amount ether amount in wei\n   */\n  public static ether(amount: BigintIsh): CurrencyAmount {\n    return new CurrencyAmount(ETHER, amount)\n  }\n\n  // amount _must_ be raw, i.e. in the native representation\n  protected constructor(currency: Currency, amount: BigintIsh) {\n    const parsedAmount = parseBigintIsh(amount)\n    validateSolidityTypeInstance(parsedAmount, SolidityType.uint256)\n\n    super(parsedAmount, JSBI.exponentiate(TEN, JSBI.BigInt(currency.decimals)))\n    this.currency = currency\n  }\n\n  public get raw(): JSBI {\n    return this.numerator\n  }\n\n  public add(other: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\n    return new CurrencyAmount(this.currency, JSBI.add(this.raw, other.raw))\n  }\n\n  public subtract(other: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\n    return new CurrencyAmount(this.currency, JSBI.subtract(this.raw, other.raw))\n  }\n\n  public toSignificant(\n    significantDigits: number = 6,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    return super.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(\n    decimalPlaces: number = this.currency.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\n    return super.toFixed(decimalPlaces, format, rounding)\n  }\n\n  public toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.currency.decimals\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(format)\n  }\n}\n","import { CurrencyAmount } from './currencyAmount'\nimport { Token } from '../token'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { BigintIsh } from '../../constants'\n\nexport class TokenAmount extends CurrencyAmount {\n  public readonly token: Token\n\n  // amount _must_ be raw, i.e. in the native representation\n  public constructor(token: Token, amount: BigintIsh) {\n    super(token, amount)\n    this.token = token\n  }\n\n  public add(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.add(this.raw, other.raw))\n  }\n\n  public subtract(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.subtract(this.raw, other.raw))\n  }\n}\n","import { Token } from '../token'\nimport { TokenAmount } from './tokenAmount'\nimport { currencyEquals } from '../token'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { BigintIsh, Rounding, TEN } from '../../constants'\nimport { Currency } from '../currency'\nimport { Route } from '../route'\nimport { Fraction } from './fraction'\nimport { CurrencyAmount } from './currencyAmount'\n\nexport class Price extends Fraction {\n  public readonly baseCurrency: Currency // input i.e. denominator\n  public readonly quoteCurrency: Currency // output i.e. numerator\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  public static fromRoute(route: Route): Price {\n    const prices: Price[] = []\n    for (const [i, pair] of route.pairs.entries()) {\n      prices.push(\n        route.path[i].equals(pair.token0)\n          ? new Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.raw, pair.reserve1.raw)\n          : new Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.raw, pair.reserve0.raw)\n      )\n    }\n    return prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\n  }\n\n  // denominator and numerator _must_ be raw, i.e. in the native representation\n  public constructor(baseCurrency: Currency, quoteCurrency: Currency, denominator: BigintIsh, numerator: BigintIsh) {\n    super(numerator, denominator)\n\n    this.baseCurrency = baseCurrency\n    this.quoteCurrency = quoteCurrency\n    this.scalar = new Fraction(\n      JSBI.exponentiate(TEN, JSBI.BigInt(baseCurrency.decimals)),\n      JSBI.exponentiate(TEN, JSBI.BigInt(quoteCurrency.decimals))\n    )\n  }\n\n  public get raw(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n\n  public get adjusted(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  public invert(): Price {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\n  }\n\n  public multiply(other: Price): Price {\n    invariant(currencyEquals(this.quoteCurrency, other.baseCurrency), 'TOKEN')\n    const fraction = super.multiply(other)\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\n  }\n\n  // performs floor division on overflow\n  public quote(currencyAmount: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(currencyAmount.currency, this.baseCurrency), 'TOKEN')\n    if (this.quoteCurrency instanceof Token) {\n      return new TokenAmount(this.quoteCurrency, super.multiply(currencyAmount.raw).quotient)\n    }\n    return CurrencyAmount.ether(super.multiply(currencyAmount.raw).quotient)\n  }\n\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import { Price } from './fractions/price'\nimport { TokenAmount } from './fractions/tokenAmount'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { pack, keccak256 } from '@ethersproject/solidity'\nimport { getCreate2Address } from '@ethersproject/address'\n\nimport {\n  BigintIsh,\n  FACTORY_ADDRESS,\n  INIT_CODE_HASH,\n  MINIMUM_LIQUIDITY,\n  ZERO,\n  ONE,\n  FIVE,\n  _997,\n  _1000,\n  ChainId\n} from '../constants'\nimport { sqrt, parseBigintIsh } from '../utils'\nimport { InsufficientReservesError, InsufficientInputAmountError } from '../errors'\nimport { Token } from './token'\n\nlet PAIR_ADDRESS_CACHE: { [token0Address: string]: { [token1Address: string]: string } } = {}\n\nexport class Pair {\n  public readonly liquidityToken: Token\n  private readonly tokenAmounts: [TokenAmount, TokenAmount]\n\n  public static getAddress(tokenA: Token, tokenB: Token): string {\n    const tokens = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\n\n    if (PAIR_ADDRESS_CACHE?.[tokens[0].address]?.[tokens[1].address] === undefined) {\n      PAIR_ADDRESS_CACHE = {\n        ...PAIR_ADDRESS_CACHE,\n        [tokens[0].address]: {\n          ...PAIR_ADDRESS_CACHE?.[tokens[0].address],\n          [tokens[1].address]: getCreate2Address(\n            FACTORY_ADDRESS,\n            keccak256(['bytes'], [pack(['address', 'address'], [tokens[0].address, tokens[1].address])]),\n            INIT_CODE_HASH\n          )\n        }\n      }\n    }\n\n    return PAIR_ADDRESS_CACHE[tokens[0].address][tokens[1].address]\n  }\n\n  public constructor(tokenAmountA: TokenAmount, tokenAmountB: TokenAmount) {\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    this.liquidityToken = new Token(\n      tokenAmounts[0].token.chainId,\n      Pair.getAddress(tokenAmounts[0].token, tokenAmounts[1].token),\n      18,\n      'UNI-V2',\n      'Uniswap V2'\n    )\n    this.tokenAmounts = tokenAmounts as [TokenAmount, TokenAmount]\n  }\n\n  /**\n   * Returns true if the token is either token0 or token1\n   * @param token to check\n   */\n  public involvesToken(token: Token): boolean {\n    return token.equals(this.token0) || token.equals(this.token1)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\n   */\n  public get token0Price(): Price {\n    return new Price(this.token0, this.token1, this.tokenAmounts[0].raw, this.tokenAmounts[1].raw)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\n   */\n  public get token1Price(): Price {\n    return new Price(this.token1, this.token0, this.tokenAmounts[1].raw, this.tokenAmounts[0].raw)\n  }\n\n  /**\n   * Return the price of the given token in terms of the other token in the pair.\n   * @param token token to return price of\n   */\n  public priceOf(token: Token): Price {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\n  }\n\n  /**\n   * Returns the chain ID of the tokens in the pair.\n   */\n  public get chainId(): ChainId {\n    return this.token0.chainId\n  }\n\n  public get token0(): Token {\n    return this.tokenAmounts[0].token\n  }\n\n  public get token1(): Token {\n    return this.tokenAmounts[1].token\n  }\n\n  public get reserve0(): TokenAmount {\n    return this.tokenAmounts[0]\n  }\n\n  public get reserve1(): TokenAmount {\n    return this.tokenAmounts[1]\n  }\n\n  public reserveOf(token: Token): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\n  }\n\n  public getOutputAmount(inputAmount: TokenAmount): [TokenAmount, Pair] {\n    invariant(this.involvesToken(inputAmount.token), 'TOKEN')\n    if (JSBI.equal(this.reserve0.raw, ZERO) || JSBI.equal(this.reserve1.raw, ZERO)) {\n      throw new InsufficientReservesError()\n    }\n    const inputReserve = this.reserveOf(inputAmount.token)\n    const outputReserve = this.reserveOf(inputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const inputAmountWithFee = JSBI.multiply(inputAmount.raw, _997)\n    const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.raw)\n    const denominator = JSBI.add(JSBI.multiply(inputReserve.raw, _1000), inputAmountWithFee)\n    const outputAmount = new TokenAmount(\n      inputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.divide(numerator, denominator)\n    )\n    if (JSBI.equal(outputAmount.raw, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return [outputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getInputAmount(outputAmount: TokenAmount): [TokenAmount, Pair] {\n    invariant(this.involvesToken(outputAmount.token), 'TOKEN')\n    if (\n      JSBI.equal(this.reserve0.raw, ZERO) ||\n      JSBI.equal(this.reserve1.raw, ZERO) ||\n      JSBI.greaterThanOrEqual(outputAmount.raw, this.reserveOf(outputAmount.token).raw)\n    ) {\n      throw new InsufficientReservesError()\n    }\n\n    const outputReserve = this.reserveOf(outputAmount.token)\n    const inputReserve = this.reserveOf(outputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const numerator = JSBI.multiply(JSBI.multiply(inputReserve.raw, outputAmount.raw), _1000)\n    const denominator = JSBI.multiply(JSBI.subtract(outputReserve.raw, outputAmount.raw), _997)\n    const inputAmount = new TokenAmount(\n      outputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.add(JSBI.divide(numerator, denominator), ONE)\n    )\n    return [inputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getLiquidityMinted(\n    totalSupply: TokenAmount,\n    tokenAmountA: TokenAmount,\n    tokenAmountB: TokenAmount\n  ): TokenAmount {\n    invariant(totalSupply.token.equals(this.liquidityToken), 'LIQUIDITY')\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    invariant(tokenAmounts[0].token.equals(this.token0) && tokenAmounts[1].token.equals(this.token1), 'TOKEN')\n\n    let liquidity: JSBI\n    if (JSBI.equal(totalSupply.raw, ZERO)) {\n      liquidity = JSBI.subtract(sqrt(JSBI.multiply(tokenAmounts[0].raw, tokenAmounts[1].raw)), MINIMUM_LIQUIDITY)\n    } else {\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].raw, totalSupply.raw), this.reserve0.raw)\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].raw, totalSupply.raw), this.reserve1.raw)\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\n    }\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return new TokenAmount(this.liquidityToken, liquidity)\n  }\n\n  public getLiquidityValue(\n    token: Token,\n    totalSupply: TokenAmount,\n    liquidity: TokenAmount,\n    feeOn: boolean = false,\n    kLast?: BigintIsh\n  ): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    invariant(totalSupply.token.equals(this.liquidityToken), 'TOTAL_SUPPLY')\n    invariant(liquidity.token.equals(this.liquidityToken), 'LIQUIDITY')\n    invariant(JSBI.lessThanOrEqual(liquidity.raw, totalSupply.raw), 'LIQUIDITY')\n\n    let totalSupplyAdjusted: TokenAmount\n    if (!feeOn) {\n      totalSupplyAdjusted = totalSupply\n    } else {\n      invariant(!!kLast, 'K_LAST')\n      const kLastParsed = parseBigintIsh(kLast)\n      if (!JSBI.equal(kLastParsed, ZERO)) {\n        const rootK = sqrt(JSBI.multiply(this.reserve0.raw, this.reserve1.raw))\n        const rootKLast = sqrt(kLastParsed)\n        if (JSBI.greaterThan(rootK, rootKLast)) {\n          const numerator = JSBI.multiply(totalSupply.raw, JSBI.subtract(rootK, rootKLast))\n          const denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast)\n          const feeLiquidity = JSBI.divide(numerator, denominator)\n          totalSupplyAdjusted = totalSupply.add(new TokenAmount(this.liquidityToken, feeLiquidity))\n        } else {\n          totalSupplyAdjusted = totalSupply\n        }\n      } else {\n        totalSupplyAdjusted = totalSupply\n      }\n    }\n\n    return new TokenAmount(\n      token,\n      JSBI.divide(JSBI.multiply(liquidity.raw, this.reserveOf(token).raw), totalSupplyAdjusted.raw)\n    )\n  }\n}\n","import { ChainId } from '../constants'\nimport invariant from 'tiny-invariant'\n\nimport { Currency, ETHER } from './currency'\nimport { Token, WETH } from './token'\nimport { Pair } from './pair'\nimport { Price } from './fractions/price'\n\nexport class Route {\n  public readonly pairs: Pair[]\n  public readonly path: Token[]\n  public readonly input: Currency\n  public readonly output: Currency\n  public readonly midPrice: Price\n\n  public constructor(pairs: Pair[], input: Currency, output?: Currency) {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(\n      pairs.every(pair => pair.chainId === pairs[0].chainId),\n      'CHAIN_IDS'\n    )\n    invariant(\n      (input instanceof Token && pairs[0].involvesToken(input)) ||\n        (input === ETHER && pairs[0].involvesToken(WETH[pairs[0].chainId])),\n      'INPUT'\n    )\n    invariant(\n      typeof output === 'undefined' ||\n        (output instanceof Token && pairs[pairs.length - 1].involvesToken(output)) ||\n        (output === ETHER && pairs[pairs.length - 1].involvesToken(WETH[pairs[0].chainId])),\n      'OUTPUT'\n    )\n\n    const path: Token[] = [input instanceof Token ? input : WETH[pairs[0].chainId]]\n    for (const [i, pair] of pairs.entries()) {\n      const currentInput = path[i]\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH')\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0\n      path.push(output)\n    }\n\n    this.pairs = pairs\n    this.path = path\n    this.midPrice = Price.fromRoute(this)\n    this.input = input\n    this.output = output ?? path[path.length - 1]\n  }\n\n  public get chainId(): ChainId {\n    return this.pairs[0].chainId\n  }\n}\n","import { Rounding, _100 } from '../../constants'\nimport { Fraction } from './fraction'\n\nconst _100_PERCENT = new Fraction(_100)\n\nexport class Percent extends Fraction {\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import invariant from 'tiny-invariant'\n\nimport { ChainId, ONE, TradeType, ZERO } from '../constants'\nimport { sortedInsert } from '../utils'\nimport { Currency, ETHER } from './currency'\nimport { CurrencyAmount } from './fractions/currencyAmount'\nimport { Fraction } from './fractions/fraction'\nimport { Percent } from './fractions/percent'\nimport { Price } from './fractions/price'\nimport { TokenAmount } from './fractions/tokenAmount'\nimport { Pair } from './pair'\nimport { Route } from './route'\nimport { currencyEquals, Token, WETH } from './token'\n\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nfunction computePriceImpact(midPrice: Price, inputAmount: CurrencyAmount, outputAmount: CurrencyAmount): Percent {\n  const exactQuote = midPrice.raw.multiply(inputAmount.raw)\n  // calculate slippage := (exactQuote - outputAmount) / exactQuote\n  const slippage = exactQuote.subtract(outputAmount.raw).divide(exactQuote)\n  return new Percent(slippage.numerator, slippage.denominator)\n}\n\n// minimal interface so the input output comparator may be shared across types\ninterface InputOutput {\n  readonly inputAmount: CurrencyAmount\n  readonly outputAmount: CurrencyAmount\n}\n\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\nexport function inputOutputComparator(a: InputOutput, b: InputOutput): number {\n  // must have same input and output token for comparison\n  invariant(currencyEquals(a.inputAmount.currency, b.inputAmount.currency), 'INPUT_CURRENCY')\n  invariant(currencyEquals(a.outputAmount.currency, b.outputAmount.currency), 'OUTPUT_CURRENCY')\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\nexport function tradeComparator(a: Trade, b: Trade) {\n  const ioComp = inputOutputComparator(a, b)\n  if (ioComp !== 0) {\n    return ioComp\n  }\n\n  // consider lowest slippage next, since these are less likely to fail\n  if (a.priceImpact.lessThan(b.priceImpact)) {\n    return -1\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\n    return 1\n  }\n\n  // finally consider the number of hops since each hop costs gas\n  return a.route.path.length - b.route.path.length\n}\n\nexport interface BestTradeOptions {\n  // how many results to return\n  maxNumResults?: number\n  // the maximum number of hops a trade should contain\n  maxHops?: number\n}\n\n/**\n * Given a currency amount and a chain ID, returns the equivalent representation as the token amount.\n * In other words, if the currency is ETHER, returns the WETH token amount for the given chain. Otherwise, returns\n * the input currency amount.\n */\nfunction wrappedAmount(currencyAmount: CurrencyAmount, chainId: ChainId): TokenAmount {\n  if (currencyAmount instanceof TokenAmount) return currencyAmount\n  if (currencyAmount.currency === ETHER) return new TokenAmount(WETH[chainId], currencyAmount.raw)\n  invariant(false, 'CURRENCY')\n}\n\nfunction wrappedCurrency(currency: Currency, chainId: ChainId): Token {\n  if (currency instanceof Token) return currency\n  if (currency === ETHER) return WETH[chainId]\n  invariant(false, 'CURRENCY')\n}\n\n/**\n * Represents a trade executed against a list of pairs.\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\n */\nexport class Trade {\n  /**\n   * The route of the trade, i.e. which pairs the trade goes through.\n   */\n  public readonly route: Route\n  /**\n   * The type of the trade, either exact in or exact out.\n   */\n  public readonly tradeType: TradeType\n  /**\n   * The input amount for the trade assuming no slippage.\n   */\n  public readonly inputAmount: CurrencyAmount\n  /**\n   * The output amount for the trade assuming no slippage.\n   */\n  public readonly outputAmount: CurrencyAmount\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  public readonly executionPrice: Price\n  /**\n   * The mid price after the trade executes assuming no slippage.\n   */\n  public readonly nextMidPrice: Price\n  /**\n   * The percent difference between the mid price before the trade and the trade execution price.\n   */\n  public readonly priceImpact: Percent\n\n  /**\n   * Constructs an exact in trade with the given amount in and route\n   * @param route route of the exact in trade\n   * @param amountIn the amount being passed in\n   */\n  public static exactIn(route: Route, amountIn: CurrencyAmount): Trade {\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT)\n  }\n\n  /**\n   * Constructs an exact out trade with the given amount out and route\n   * @param route route of the exact out trade\n   * @param amountOut the amount returned by the trade\n   */\n  public static exactOut(route: Route, amountOut: CurrencyAmount): Trade {\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT)\n  }\n\n  public constructor(route: Route, amount: CurrencyAmount, tradeType: TradeType) {\n    const amounts: TokenAmount[] = new Array(route.path.length)\n    const nextPairs: Pair[] = new Array(route.pairs.length)\n    if (tradeType === TradeType.EXACT_INPUT) {\n      invariant(currencyEquals(amount.currency, route.input), 'INPUT')\n      amounts[0] = wrappedAmount(amount, route.chainId)\n      for (let i = 0; i < route.path.length - 1; i++) {\n        const pair = route.pairs[i]\n        const [outputAmount, nextPair] = pair.getOutputAmount(amounts[i])\n        amounts[i + 1] = outputAmount\n        nextPairs[i] = nextPair\n      }\n    } else {\n      invariant(currencyEquals(amount.currency, route.output), 'OUTPUT')\n      amounts[amounts.length - 1] = wrappedAmount(amount, route.chainId)\n      for (let i = route.path.length - 1; i > 0; i--) {\n        const pair = route.pairs[i - 1]\n        const [inputAmount, nextPair] = pair.getInputAmount(amounts[i])\n        amounts[i - 1] = inputAmount\n        nextPairs[i - 1] = nextPair\n      }\n    }\n\n    this.route = route\n    this.tradeType = tradeType\n    this.inputAmount =\n      tradeType === TradeType.EXACT_INPUT\n        ? amount\n        : route.input === ETHER\n        ? CurrencyAmount.ether(amounts[0].raw)\n        : amounts[0]\n    this.outputAmount =\n      tradeType === TradeType.EXACT_OUTPUT\n        ? amount\n        : route.output === ETHER\n        ? CurrencyAmount.ether(amounts[amounts.length - 1].raw)\n        : amounts[amounts.length - 1]\n    this.executionPrice = new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.inputAmount.raw,\n      this.outputAmount.raw\n    )\n    this.nextMidPrice = Price.fromRoute(new Route(nextPairs, route.input))\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\n  }\n\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return this.outputAmount\n    } else {\n      const slippageAdjustedAmountOut = new Fraction(ONE)\n        .add(slippageTolerance)\n        .invert()\n        .multiply(this.outputAmount.raw).quotient\n      return this.outputAmount instanceof TokenAmount\n        ? new TokenAmount(this.outputAmount.token, slippageAdjustedAmountOut)\n        : CurrencyAmount.ether(slippageAdjustedAmountOut)\n    }\n  }\n\n  /**\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return this.inputAmount\n    } else {\n      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.raw).quotient\n      return this.inputAmount instanceof TokenAmount\n        ? new TokenAmount(this.inputAmount.token, slippageAdjustedAmountIn)\n        : CurrencyAmount.ether(slippageAdjustedAmountIn)\n    }\n  }\n\n  /**\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n   * amount to an output token, making at most `maxHops` hops.\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyAmountIn exact amount of input currency to spend\n   * @param currencyOut the desired currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountIn used in recursion; the original value of the currencyAmountIn parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactIn(\n    pairs: Pair[],\n    currencyAmountIn: CurrencyAmount,\n    currencyOut: Currency,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountIn: CurrencyAmount = currencyAmountIn,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountIn === currencyAmountIn || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountIn instanceof TokenAmount\n        ? currencyAmountIn.token.chainId\n        : currencyOut instanceof Token\n        ? currencyOut.chainId\n        : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountIn = wrappedAmount(currencyAmountIn, chainId)\n    const tokenOut = wrappedCurrency(currencyOut, chainId)\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountIn.token) && !pair.token1.equals(amountIn.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountOut: TokenAmount\n      try {\n        ;[amountOut] = pair.getOutputAmount(amountIn)\n      } catch (error) {\n        // input too low\n        if (error.isInsufficientInputAmountError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (amountOut.token.equals(tokenOut)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([...currentPairs, pair], originalAmountIn.currency, currencyOut),\n            originalAmountIn,\n            TradeType.EXACT_INPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactIn(\n          pairsExcludingThisPair,\n          amountOut,\n          currencyOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [...currentPairs, pair],\n          originalAmountIn,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n\n  /**\n   * similar to the above method but instead targets a fixed output amount\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\n   * to an output token amount, making at most `maxHops` hops\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyIn the currency to spend\n   * @param currencyAmountOut the exact amount of currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountOut used in recursion; the original value of the currencyAmountOut parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactOut(\n    pairs: Pair[],\n    currencyIn: Currency,\n    currencyAmountOut: CurrencyAmount,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountOut: CurrencyAmount = currencyAmountOut,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountOut === currencyAmountOut || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountOut instanceof TokenAmount\n        ? currencyAmountOut.token.chainId\n        : currencyIn instanceof Token\n        ? currencyIn.chainId\n        : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountOut = wrappedAmount(currencyAmountOut, chainId)\n    const tokenIn = wrappedCurrency(currencyIn, chainId)\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountOut.token) && !pair.token1.equals(amountOut.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountIn: TokenAmount\n      try {\n        ;[amountIn] = pair.getInputAmount(amountOut)\n      } catch (error) {\n        // not enough liquidity in this pair\n        if (error.isInsufficientReservesError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the input token, so this is the first trade of one of the paths\n      if (amountIn.token.equals(tokenIn)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([pair, ...currentPairs], currencyIn, originalAmountOut.currency),\n            originalAmountOut,\n            TradeType.EXACT_OUTPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactOut(\n          pairsExcludingThisPair,\n          currencyIn,\n          amountIn,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [pair, ...currentPairs],\n          originalAmountOut,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n}\n","import { TradeType } from './constants'\nimport invariant from 'tiny-invariant'\nimport { validateAndParseAddress } from './utils'\nimport { CurrencyAmount, ETHER, Percent, Trade } from './entities'\n\n/**\n * Options for producing the arguments to send call to the router.\n */\nexport interface TradeOptions {\n  /**\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\n   */\n  allowedSlippage: Percent\n  /**\n   * How long the swap is valid until it expires, in seconds.\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\n   * are generated.\n   */\n  ttl: number\n  /**\n   * The account that should receive the output of the swap.\n   */\n  recipient: string\n\n  /**\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\n   */\n  feeOnTransfer?: boolean\n}\n\n/**\n * The parameters to use in the call to the Uniswap V2 Router to execute a trade.\n */\nexport interface SwapParameters {\n  /**\n   * The method to call on the Uniswap V2 Router.\n   */\n  methodName: string\n  /**\n   * The arguments to pass to the method, all hex encoded.\n   */\n  args: (string | string[])[]\n  /**\n   * The amount of wei to send in hex.\n   */\n  value: string\n}\n\nfunction toHex(currencyAmount: CurrencyAmount) {\n  return `0x${currencyAmount.raw.toString(16)}`\n}\n\nconst ZERO_HEX = '0x0'\n\n/**\n * Represents the Uniswap V2 Router, and has static methods for helping execute trades.\n */\nexport abstract class Router {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trade to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapCallParameters(trade: Trade, options: TradeOptions): SwapParameters {\n    const etherIn = trade.inputAmount.currency === ETHER\n    const etherOut = trade.outputAmount.currency === ETHER\n    // the router does not support both ether in and out\n    invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')\n    invariant(options.ttl > 0, 'TTL')\n\n    const to: string = validateAndParseAddress(options.recipient)\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage))\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage))\n    const path: string[] = trade.route.path.map(token => token.address)\n    const deadline = `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\n    const useFeeOnTransfer = Boolean(options.feeOnTransfer)\n\n    let methodName: string\n    let args: (string | string[])[]\n    let value: string\n    switch (trade.tradeType) {\n      case TradeType.EXACT_INPUT:\n        if (etherIn) {\n          methodName = useFeeOnTransfer ? 'swapExactETHForTokensSupportingFeeOnTransferTokens' : 'swapExactETHForTokens'\n          // (uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = useFeeOnTransfer ? 'swapExactTokensForETHSupportingFeeOnTransferTokens' : 'swapExactTokensForETH'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = useFeeOnTransfer\n            ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens'\n            : 'swapExactTokensForTokens'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n      case TradeType.EXACT_OUTPUT:\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\n        if (etherIn) {\n          methodName = 'swapETHForExactTokens'\n          // (uint amountOut, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = 'swapTokensForExactETH'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = 'swapTokensForExactTokens'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n    }\n    return {\n      methodName,\n      args,\n      value\n    }\n  }\n}\n","import { Contract } from '@ethersproject/contracts'\nimport { getNetwork } from '@ethersproject/networks'\nimport { getDefaultProvider } from '@ethersproject/providers'\nimport { TokenAmount } from './entities/fractions/tokenAmount'\nimport { Pair } from './entities/pair'\nimport IUniswapV2Pair from '@uniswap/v2-core/build/IUniswapV2Pair.json'\nimport invariant from 'tiny-invariant'\nimport ERC20 from './abis/ERC20.json'\nimport { ChainId } from './constants'\nimport { Token } from './entities/token'\n\nlet TOKEN_DECIMALS_CACHE: { [chainId: number]: { [address: string]: number } } = {\n  [ChainId.MAINNET]: {\n    '0xE0B7927c4aF23765Cb51314A0E0521A9645F0E2A': 9 // DGD\n  }\n}\n\n/**\n * Contains methods for constructing instances of pairs and tokens from on-chain data.\n */\nexport abstract class Fetcher {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  /**\n   * Fetch information for a given token on the given chain, using the given ethers provider.\n   * @param chainId chain of the token\n   * @param address address of the token on the chain\n   * @param provider provider used to fetch the token\n   * @param symbol optional symbol of the token\n   * @param name optional name of the token\n   */\n  public static async fetchTokenData(\n    chainId: ChainId,\n    address: string,\n    provider = getDefaultProvider(getNetwork(chainId)),\n    symbol?: string,\n    name?: string\n  ): Promise<Token> {\n    const parsedDecimals =\n      typeof TOKEN_DECIMALS_CACHE?.[chainId]?.[address] === 'number'\n        ? TOKEN_DECIMALS_CACHE[chainId][address]\n        : await new Contract(address, ERC20, provider).decimals().then((decimals: number): number => {\n            TOKEN_DECIMALS_CACHE = {\n              ...TOKEN_DECIMALS_CACHE,\n              [chainId]: {\n                ...TOKEN_DECIMALS_CACHE?.[chainId],\n                [address]: decimals\n              }\n            }\n            return decimals\n          })\n    return new Token(chainId, address, parsedDecimals, symbol, name)\n  }\n\n  /**\n   * Fetches information about a pair and constructs a pair from the given two tokens.\n   * @param tokenA first token\n   * @param tokenB second token\n   * @param provider the provider to use to fetch the data\n   */\n  public static async fetchPairData(\n    tokenA: Token,\n    tokenB: Token,\n    provider = getDefaultProvider(getNetwork(tokenA.chainId))\n  ): Promise<Pair> {\n    invariant(tokenA.chainId === tokenB.chainId, 'CHAIN_ID')\n    const address = Pair.getAddress(tokenA, tokenB)\n    const [reserves0, reserves1] = await new Contract(address, IUniswapV2Pair.abi, provider).getReserves()\n    const balances = tokenA.sortsBefore(tokenB) ? [reserves0, reserves1] : [reserves1, reserves0]\n    return new Pair(new TokenAmount(tokenA, balances[0]), new TokenAmount(tokenB, balances[1]))\n  }\n}\n"],"names":["ChainId","TradeType","Rounding","FACTORY_ADDRESS","INIT_CODE_HASH","MINIMUM_LIQUIDITY","JSBI","BigInt","ZERO","ONE","TWO","THREE","FIVE","TEN","_100","_997","_1000","SolidityType","SOLIDITY_TYPE_MAXIMA","uint8","uint256","CAN_SET_PROTOTYPE","Object","InsufficientReservesError","Error","constructor","name","setPrototypeOf","new","target","prototype","InsufficientInputAmountError","validateSolidityTypeInstance","value","solidityType","greaterThanOrEqual","process","invariant","lessThanOrEqual","validateAndParseAddress","address","checksummedAddress","getAddress","warning","error","parseBigintIsh","bigintIsh","toString","sqrt","y","z","x","greaterThan","add","divide","lessThan","notEqual","sortedInsert","items","maxSize","comparator","length","push","isFull","lo","hi","mid","splice","pop","Currency","decimals","symbol","ETHER","Token","chainId","equals","other","sortsBefore","toLowerCase","currencyEquals","currencyA","currencyB","WETH","MAINNET","ROPSTEN","RINKEBY","GÖRLI","KOVAN","Decimal","toFormat","_Decimal","Big","_Big","toSignificantRounding","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","Fraction","numerator","denominator","quotient","remainder","invert","otherParsed","equal","multiply","subtract","equalTo","toSignificant","significantDigits","format","rounding","groupSeparator","Number","isInteger","set","precision","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","CurrencyAmount","currency","amount","parsedAmount","exponentiate","ether","raw","toExact","TokenAmount","token","Price","baseCurrency","quoteCurrency","scalar","fromRoute","route","prices","i","pair","pairs","entries","path","token0","reserve0","reserve1","slice","reduce","accumulator","currentValue","adjusted","fraction","quote","currencyAmount","PAIR_ADDRESS_CACHE","Pair","tokenAmountA","tokenAmountB","tokenAmounts","liquidityToken","tokenA","tokenB","tokens","_PAIR_ADDRESS_CACHE","_PAIR_ADDRESS_CACHE$t","undefined","_PAIR_ADDRESS_CACHE2","getCreate2Address","keccak256","pack","involvesToken","token1","token0Price","token1Price","priceOf","reserveOf","getOutputAmount","inputAmount","inputReserve","outputReserve","inputAmountWithFee","outputAmount","getInputAmount","getLiquidityMinted","totalSupply","liquidity","amount0","amount1","getLiquidityValue","feeOn","kLast","totalSupplyAdjusted","kLastParsed","rootK","rootKLast","feeLiquidity","Route","input","output","every","currentInput","midPrice","_100_PERCENT","Percent","computePriceImpact","exactQuote","slippage","inputOutputComparator","a","b","tradeComparator","ioComp","priceImpact","wrappedAmount","wrappedCurrency","Trade","tradeType","amounts","Array","nextPairs","EXACT_INPUT","nextPair","EXACT_OUTPUT","executionPrice","nextMidPrice","exactIn","amountIn","exactOut","amountOut","minimumAmountOut","slippageTolerance","slippageAdjustedAmountOut","maximumAmountIn","slippageAdjustedAmountIn","bestTradeExactIn","currencyAmountIn","currencyOut","_temp","currentPairs","originalAmountIn","bestTrades","maxNumResults","maxHops","tokenOut","isInsufficientInputAmountError","pairsExcludingThisPair","concat","bestTradeExactOut","currencyIn","currencyAmountOut","_temp2","originalAmountOut","tokenIn","isInsufficientReservesError","toHex","ZERO_HEX","Router","swapCallParameters","trade","options","etherIn","etherOut","ttl","to","recipient","allowedSlippage","map","deadline","Math","floor","Date","getTime","useFeeOnTransfer","Boolean","feeOnTransfer","methodName","args","TOKEN_DECIMALS_CACHE","Fetcher","fetchTokenData","provider","parsedDecimals","getDefaultProvider","getNetwork","_TOKEN_DECIMALS_CACHE","_TOKEN_DECIMALS_CACHE2","Promise","resolve","Contract","ERC20","then","_TOKEN_DECIMALS_CACHE3","e","reject","fetchPairData","IUniswapV2Pair","abi","getReserves","_ref","reserves0","reserves1","balances"],"mappings":"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"}